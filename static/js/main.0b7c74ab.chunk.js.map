{"version":3,"sources":["actions.js","api.js","sagas.js","store.js","components/main.js","App.js","reportWebVitals.js","index.js"],"names":["REQUEST_API_DATA","requestApiData","params","type","receiveApiData","data","fetchData","a","fetch","response","json","console","log","getApiData","mySaga","action","call","put","message","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","Main","results","this","props","result","onSubmit","e","preventDefault","target","url","value","name","original_link","short_link","React","Component","connect","state","dispatch","bindActionCreators","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"mOAAaA,EAAiB,mBAGjBC,EAAe,SAACC,GAAD,MAAW,CAACC,KAAMH,EAAkBE,WACnDE,EAAe,SAAAC,GAAI,MAAG,CAACF,KAHN,mBAG8BE,S,QCJ/CC,EAAS,uCAAE,WAAMJ,GAAN,iBAAAK,EAAA,+EAEDC,MAAM,wCAAwCN,GAF7C,cAEhBO,EAFgB,gBAGJA,EAASC,OAHL,cAGhBL,EAHgB,OAItBM,QAAQC,IAAI,SACZD,QAAQC,IAAIP,GALU,kBAMfA,GANe,kCAQpBM,QAAQC,IAAR,MARoB,0DAAF,sD,WCOZC,G,WAyBeC,GAzBzB,SAAUD,EAAWE,GAArB,uEAGkB,OAHlB,SAEKJ,QAAQC,IAAIG,EAAQ,QAFzB,SAGwBC,YAAKV,EAAUS,EAAOb,QAH9C,OAIK,OADMG,EAHX,gBAIWY,YAAIb,EAAeC,IAJ9B,uDAMIM,QAAQC,IAAI,KAAEM,SANlB,qDAyBe,SAAUJ,IAAV,iEACb,OADa,SACPK,YAAWnB,EAAkBa,GADtB,uCC1Bf,IAAMO,EAAiBC,cAGRC,cACbC,IACAC,YAAgBJ,IAElBA,EAAeK,IAAIX,G,2CCRbY,E,4JAMN,WAAU,IAAD,OACDC,EAAQC,KAAKC,MAAMxB,KAAKyB,QAAU,GACxC,OACA,gCACC,8EACA,uBAAMC,SAAU,SAACC,GACfA,EAAEC,iBACJtB,QAAQC,IAAIoB,EAAEE,OAAOC,IAAIC,OACxB,EAAKP,MAAM5B,eAAe+B,EAAEE,OAAOC,IAAIC,OACxCzB,QAAQC,IAAI,EAAKiB,MAAMxB,KAAKyB,QAC5BnB,QAAQC,IAAI,EAAKe,UALjB,4BAQA,uBAAOU,KAAK,QACZ,uBAAOlC,KAAK,cAEX,gCACGwB,EAAQW,cACRX,EAAQY,qB,GAxBIC,IAAMC,WA+BVC,eAFS,SAAAC,GAAK,MAAI,CAACtC,KAAMsC,EAAMtC,SACpB,SAAAuC,GAAQ,OAAIC,YAAmB,CAAC5C,kBAAgB2C,KAC3DF,CAA6ChB,GC/B9C,aACZ,OACE,cAAC,IAAD,CAAUoB,MAAOA,EAAjB,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.0b7c74ab.chunk.js","sourcesContent":["export const REQUEST_API_DATA='REQUEST_API_DATA'\r\nexport const RECEIVE_API_DATA='RECEIVE_API_DATA'\r\n\r\nexport const requestApiData=(params)=>({type: REQUEST_API_DATA, params});\r\nexport const receiveApiData=data=>({type: RECEIVE_API_DATA, data});","export const fetchData= async(params) => {\r\n  try{\r\n  const response=await fetch(\"https://api.shrtco.de/v2/shorten?url=\"+params)\r\n  const data= await response.json()\r\n  console.log(\"hello\")\r\n  console.log(data)\r\n  return data\r\n  } catch(e){\r\n    console.log(e)\r\n  }\r\n}","import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\r\nimport {REQUEST_API_DATA, receiveApiData} from \"./actions\"\r\nimport{fetchData} from'./api';\r\n\r\n// import Api from '...'\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getApiData(action) {\r\n   try {\r\n     console.log(action, \"test\")\r\n     const data = yield call(fetchData,action.params);\r\n     yield put(receiveApiData(data));\r\n    } catch (e) {\r\n    console.log(e.message)\r\n    }\r\n}\r\n\r\n/*\r\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\r\n  Allows concurrent fetches of user.\r\n*/\r\n// function* mySaga() {\r\n//   yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\r\n// }\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport default function* mySaga() {\r\n  yield takeLatest(REQUEST_API_DATA, getApiData);\r\n}\r\n\r\n// export default mySaga;","import { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport reducer from './reducers'\r\nimport mySaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\r\nexport default createStore(\r\n  reducer,\r\n  applyMiddleware(sagaMiddleware)\r\n)\r\nsagaMiddleware.run(mySaga)","import React,{useEffect} from 'react';\r\nimport {bindActionCreators} from \"redux\"\r\nimport {connect} from \"react-redux\";\r\nimport {requestApiData} from \"../actions\"\r\n\r\nclass Main extends React.Component{\r\n\r\n  // componentDidMount(){\r\n  //   this.props.requestApiData(\"testingplez\");\r\n  // }\r\n\r\nrender() {\r\n  const results=this.props.data.result || []\r\n  return(\r\n  <div>\r\n   <h1>URL Shortener featuring redux-saga for Ringy</h1>\r\n   <form onSubmit={(e)=>{\r\n     e.preventDefault()\r\n   console.log(e.target.url.value)\r\n    this.props.requestApiData(e.target.url.value);\r\n   console.log(this.props.data.result)\r\n   console.log(this.results)\r\n  }}>\r\n    Url to Shorten:\r\n   <input name=\"url\"></input>\r\n   <input type=\"submit\"></input>\r\n   </form>\r\n    <div>\r\n      {results.original_link}\r\n      {results.short_link}\r\n      </div>\r\n  </div>\r\n)}}\r\n\r\nconst mapStateToProps = state =>({data: state.data})\r\nconst mapDispatchToProps= dispatch => bindActionCreators({requestApiData},dispatch)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React, {Component} from 'react';\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport Main from \"./components/main\"\n\nexport default()=> {\n  return (\n    <Provider store={store}>\n      <Main/>\n    </Provider>\n  );\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}